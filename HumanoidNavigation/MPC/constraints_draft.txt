# initial position constraint
self.optim_prob.subject_to(self.X_mpc[:, 0] == self.x0)

for k in range(self.N_horizon):
    integration_res = self._integrate(self.X_mpc[:, k], self.U_mpc[:, k])
    self.optim_prob.subject_to(self.X_mpc[:, k + 1] == integration_res)

    # leg reachability
    reachability = self._compute_leg_reachability_matrix(self.X_mpc[:, k], self.X_mpc_theta[k])
    self.optim_prob.subject_to(cs.le(reachability, cs.vertcat(conf["L_MAX"], conf["L_MAX"])))
    self.optim_prob.subject_to(cs.ge(reachability, cs.vertcat(-conf["L_MAX"], -conf["L_MAX"])))

    # maneuverability constraint
    velocity_term, turning_term = self._compute_maneuverability_terms(self.X_mpc[:, k+1], self.X_mpc_theta[k+1],
                                                                      self.U_mpc_omega[k])
    self.optim_prob.subject_to(velocity_term <= turning_term)

for k in range(1, self.N_horizon + 1):
    # walking velocities constraint
    local_velocities = self._compute_walking_velocities_matrix(self.X_mpc[:, k], self.X_mpc_theta[k], k)
    self.optim_prob.subject_to(local_velocities <= conf["V_MAX"])
    self.optim_prob.subject_to(local_velocities >= conf["V_MIN"])